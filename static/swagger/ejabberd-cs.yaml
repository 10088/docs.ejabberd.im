swagger: '2.0'
info:
  version: 0.1.0
  title: ejabberd Community Server - ReST API
  description: >-
    ejabberd is a Rock Solid, Massively Scalable, Infinitely Extensible XMPP
    Server. It can be fully controled with ReST API described in this document.
  contact:
    name: ejabberd Development Team
    url: 'https://www.ejabberd.im'
    email: contact@process-one.net
basePath: /api
host: 'localhost:5280'
schemes:
  - http
  - https
paths:
  /backup:
	# FIXME: I could not make backup work properly:
	#  curl -X GET --header 'Accept: application/json' 'http://localhost:5280/api/backup?filename=test'
    # "Can't store backup in <<\"/Users/mremond/devel/p1/ejabberd/ejabberd\">> at node nonode@nohost: {'EXIT',\n{error,\nfunction_clause}}"
    get:
      description: >-
        Initiate backup of ejabberd Mnesia database. The file is stored on local
        ejabberd server where the request is made. You can use a full path to
        store the file.
      tags:
        - mnesia
      parameters:
        - name: filename
          in: query
          description: Filename
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            title: ResponseText
            type: string
        '500':
          description: Crash error
          schema:
            title: LogMessage
            type: string
  /register:
	# FIXME: For register and unregister, we need to switch to ReSTFUL approach:
	# We can have URL like: /api/account/user@domain.net with GET to get user info, POST to create user, PUT to update it and DELETE to unregister it.
	# That requires quite some change on the command approach ...
    # We need to have commands, that can be aliased with Restful interfaces.
    post:
      description: Register a user.
      tags:
        - accounts
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userCredentials
          in: body
          description: User credentials
          required: true
          schema:
            $ref: '#/definitions/userCredentials'
      responses:
		# FIXME: Response are inconsistents, especially on missing parameters
        '200':
          description: Successful response
          schema:
            title: ResponseText
            type: string
        '400':
          description: Bad request
        '500':
          description: Crash error
          schema:
            title: LogMessage
            type: string
  /unregister:
    post:
      description: 'Delete a user from server, with all his data.'
      tags:
        - accounts
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user
          in: body
          description: User
          required: true
          schema:
            $ref: '#/definitions/user'
      responses:
	    # FIXME: Response is always 200 even if user deleted does not exist anymore.
		# FIXME: Body response is empty JSON string ""
        '200':
          description: Successful response
          schema:
            title: ResponseText
            type: string
        '500':
          description: Crash error
          schema:
            title: LogMessage
            type: string
definitions:
  user:
    type: object
    required:
      - user
      - host
    properties:
      user:
        type: string
      host:
        type: string
  userCredentials:
    type: object
    required:
      - user
      - host
      - password
    properties:
      user:
        type: string
      host:
        type: string
      password:
        type: string